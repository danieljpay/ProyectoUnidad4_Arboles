/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import controller.Controller;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelo.EmptyFieldException;

/**
 *
 * @author plupy
 */
public class FrMenu extends javax.swing.JFrame {
    Controller controlador;
    DefaultTableModel modeloCoincidencias;
    int arbolPreferido;
    boolean datosCargados=false;
    /**
     * Creates new form FrMenu
     */
    public FrMenu(Controller controlador) {
        initComponents();
        this.controlador = controlador;
        this.setLocationRelativeTo(null);
        modeloCoincidencias = new DefaultTableModel();
    }
          
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        rbName = new javax.swing.JRadioButton();
        rbAverage = new javax.swing.JRadioButton();
        rbDegree = new javax.swing.JRadioButton();
        lbTitle = new javax.swing.JLabel();
        lbQuestionTree = new javax.swing.JLabel();
        optionsTree = new javax.swing.JComboBox<>();
        btnCreateTree = new javax.swing.JButton();
        lbQuestionSearch = new javax.swing.JLabel();
        btnSearch = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbCoincidences = new javax.swing.JTable();
        btnLoadData = new javax.swing.JButton();
        txtName = new javax.swing.JTextField();
        lbDirection = new javax.swing.JLabel();
        txtDirection = new javax.swing.JTextField();
        txtAverage = new javax.swing.JTextField();
        lbCoincidences = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtDegree = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        rbName.setText("Nombre");

        rbAverage.setText("Promedio");

        rbDegree.setText("Licenciatura");

        lbTitle.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        lbTitle.setText("Proyecto Árboles");

        lbQuestionTree.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lbQuestionTree.setText("¿Qué tipo de árbol desea?");

        optionsTree.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Árbol ABB", "Árbol AVL", "Árbol B" }));

        btnCreateTree.setText("Crear árbol");
        btnCreateTree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateTreeActionPerformed(evt);
            }
        });

        lbQuestionSearch.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lbQuestionSearch.setText("¿Cómo desea realizar su búsqueda?");

        btnSearch.setText("Buscar");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        tbCoincidences.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Nombre", "Licenciatura", "Promedio"
            }
        ));
        jScrollPane1.setViewportView(tbCoincidences);

        btnLoadData.setText("Cargar datos");
        btnLoadData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLoadDataActionPerformed(evt);
            }
        });

        lbDirection.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lbDirection.setText("Dirección: ");

        lbCoincidences.setFont(new java.awt.Font("SansSerif", 0, 12)); // NOI18N
        lbCoincidences.setText("Coincidencias:");

        jLabel1.setFont(new java.awt.Font("Dialog", 0, 8)); // NOI18N
        jLabel1.setText("plupyt");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(optionsTree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(btnCreateTree))
                            .addComponent(lbQuestionTree))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbTitle)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(lbDirection)
                                    .addGap(29, 29, 29)
                                    .addComponent(txtDirection, javax.swing.GroupLayout.PREFERRED_SIZE, 333, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(lbQuestionSearch)))
                        .addGap(48, 48, 48)
                        .addComponent(btnLoadData)
                        .addContainerGap(222, Short.MAX_VALUE))))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(40, 40, 40)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(rbName)
                                    .addComponent(rbAverage)
                                    .addComponent(rbDegree))
                                .addGap(34, 34, 34)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtName, javax.swing.GroupLayout.DEFAULT_SIZE, 163, Short.MAX_VALUE)
                                    .addComponent(txtAverage)
                                    .addComponent(txtDegree)))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(116, 116, 116)
                                .addComponent(btnSearch)))
                        .addGap(83, 83, 83)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 384, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbCoincidences)))
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lbTitle)
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLoadData)
                    .addComponent(lbDirection)
                    .addComponent(txtDirection, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(50, 50, 50)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbCoincidences, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbQuestionTree))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(optionsTree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnCreateTree))
                        .addGap(32, 32, 32)
                        .addComponent(lbQuestionSearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbName)
                            .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbAverage)
                            .addComponent(txtAverage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(rbDegree)
                            .addComponent(txtDegree, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(31, 31, 31)
                        .addComponent(btnSearch))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 21, Short.MAX_VALUE)
                .addComponent(jLabel1))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLoadDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLoadDataActionPerformed
        //btnLoadData
        try {
            controlador.getDatos().readCSV(txtDirection.getText(), controlador.getMatriculados()); 
            txtDirection.setText("");
            datosCargados=controlador.getDatos().confirmacionDatosCargados();
        } 
        catch (IOException ex) {
            JOptionPane.showMessageDialog(null, "No se pudieron cargar los datos, revisa la ruta", "Error en archivos", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnLoadDataActionPerformed

    private void btnCreateTreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateTreeActionPerformed
        //btnCreateTree
        if (datosCargados) {
            arbolPreferido = optionsTree.getSelectedIndex();
            try {
                switch (arbolPreferido) {
                    case 0:
                        controlador.crearArbolesABB();
                        break;
                    case 1:
                        controlador.crearArbolesAVL();
                        break;
                    case 2:
                        controlador.crearArbolesB();
                        break;
                }
                JOptionPane.showMessageDialog(this, "El árbol seleccionado ha sido creado", "Árbol creado", JOptionPane.INFORMATION_MESSAGE);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "No se pudo crear el árbol");
                ex.printStackTrace();
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Primero ingresa los datos", "Datos no registrados", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnCreateTreeActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        //btnSearch
        if (datosCargados) {
            modeloCoincidencias.setColumnCount(0);
            modeloCoincidencias.setRowCount(0);
            ArrayList referenciasUno;
            ArrayList referenciasDos;
            ArrayList referenciasTres;
            ArrayList auxImpresion;
            ArrayList auxImpresionDos;
            String busqueda = "";
            String busquedaDos = "";
            String busquedaTres = "";
            try {
                if (rbName.isSelected() && rbAverage.isSelected() && rbDegree.isSelected()){ //busqueda nombre, promedio y profesion
                    if (txtName.getText().compareTo("") == 0 || txtAverage.getText().compareTo("") == 0|| txtDegree.getText().compareTo("") == 0) {
                        throw new EmptyFieldException("Campos vacíos");
                    }
                    busqueda = txtName.getText();
                    busquedaDos = Float.parseFloat(txtAverage.getText()) + "";
                    busquedaTres = txtDegree.getText();
                    switch (arbolPreferido) {
                        case 0:
                            referenciasUno = controlador.treeABBCreatedSearch(busqueda, controlador.getArbolABBNombres());
                            referenciasDos = controlador.treeABBCreatedSearch(busquedaDos, controlador.getArbolABBPromedio());
                            referenciasTres = controlador.treeABBCreatedSearch(busquedaTres, controlador.getArbolABBProfesion());
                            auxImpresion = controlador.compareReference(referenciasUno, referenciasDos);
                            auxImpresionDos = controlador.compareReference(auxImpresion, referenciasTres);
                            controlador.imprimirEnTabla(modeloCoincidencias, auxImpresionDos);
                            break;
                        case 1:
                            referenciasUno = controlador.treeAVLCreatedSearch(busqueda, controlador.getArbolAVLNombres());
                            referenciasDos = controlador.treeAVLCreatedSearch(busqueda, controlador.getArbolAVLPromedio());
                            referenciasTres = controlador.treeAVLCreatedSearch(busquedaDos, controlador.getArbolAVLProfesion());
                            auxImpresion = controlador.compareReference(referenciasUno, referenciasDos);
                            auxImpresionDos = controlador.compareReference(auxImpresion, referenciasTres);
                            controlador.imprimirEnTabla(modeloCoincidencias, auxImpresionDos);
                            break;
                        case 2:
                            referenciasUno = controlador.treeBCreatedSearch(busqueda, controlador.getArbolBNombres());
                            referenciasDos = controlador.treeBCreatedSearch(busqueda, controlador.getArbolBPromedio());
                            referenciasTres = controlador.treeBCreatedSearch(busquedaDos, controlador.getArbolBProfesion());
                            auxImpresion = controlador.compareReference(referenciasUno, referenciasDos);
                            auxImpresionDos = controlador.compareReference(auxImpresion, referenciasTres);
                            controlador.imprimirEnTabla(modeloCoincidencias, auxImpresionDos);
                            break;                    
                    }
                    tbCoincidences.setModel(modeloCoincidencias);
                }
                if (rbName.isSelected() && rbAverage.isSelected() && !rbDegree.isSelected()) {   //busqueda nombre y promedio
                    if (txtName.getText().compareTo("") == 0 || txtAverage.getText().compareTo("") == 0) {
                        throw new EmptyFieldException("Campos vacíos");
                    }
                    busqueda = txtName.getText();
                    busquedaDos = Float.parseFloat(txtAverage.getText()) + "";
                    switch (arbolPreferido) {
                        case 0:
                            referenciasUno = controlador.treeABBCreatedSearch(busqueda, controlador.getArbolABBNombres());
                            referenciasDos = controlador.treeABBCreatedSearch(busquedaDos, controlador.getArbolABBPromedio());
                            auxImpresion = controlador.compareReference(referenciasUno, referenciasDos);
                            controlador.imprimirEnTabla(modeloCoincidencias, auxImpresion);
                            break;
                        case 1:
                            referenciasUno = controlador.treeAVLCreatedSearch(busqueda, controlador.getArbolAVLNombres());
                            referenciasDos = controlador.treeAVLCreatedSearch(busquedaDos, controlador.getArbolAVLPromedio());
                            auxImpresion = controlador.compareReference(referenciasUno, referenciasDos);
                            controlador.imprimirEnTabla(modeloCoincidencias, auxImpresion);
                            break;
                        case 2:
                            referenciasUno = controlador.treeBCreatedSearch(busqueda, controlador.getArbolBNombres());
                            referenciasDos = controlador.treeBCreatedSearch(busquedaDos, controlador.getArbolBPromedio());
                            auxImpresion = controlador.compareReference(referenciasUno, referenciasDos);
                            controlador.imprimirEnTabla(modeloCoincidencias, auxImpresion);
                            break;                    
                    }
                    tbCoincidences.setModel(modeloCoincidencias);
                }
                if (rbAverage.isSelected() && rbDegree.isSelected() && !rbName.isSelected()){ //busqueda promedio y profesion
                    if (txtAverage.getText().compareTo("") == 0 || txtDegree.getText().compareTo("") == 0) {
                        throw new EmptyFieldException("Campos vacíos");
                    }
                    busqueda = Float.parseFloat(txtAverage.getText()) + "";
                    busquedaDos = txtDegree.getText();
                    switch (arbolPreferido) {
                        case 0:
                            referenciasUno = controlador.treeABBCreatedSearch(busqueda, controlador.getArbolABBPromedio());
                            referenciasDos = controlador.treeABBCreatedSearch(busquedaDos, controlador.getArbolABBProfesion());
                            auxImpresion = controlador.compareReference(referenciasUno, referenciasDos);
                            controlador.imprimirEnTabla(modeloCoincidencias, auxImpresion);
                            break;
                        case 1:
                            referenciasUno = controlador.treeAVLCreatedSearch(busqueda, controlador.getArbolAVLPromedio());
                            referenciasDos = controlador.treeAVLCreatedSearch(busquedaDos, controlador.getArbolAVLProfesion());
                            auxImpresion = controlador.compareReference(referenciasUno, referenciasDos);
                            controlador.imprimirEnTabla(modeloCoincidencias, auxImpresion);
                            break;
                        case 2:
                            referenciasUno = controlador.treeBCreatedSearch(busqueda, controlador.getArbolBPromedio());
                            referenciasDos = controlador.treeBCreatedSearch(busquedaDos, controlador.getArbolBProfesion());
                            auxImpresion = controlador.compareReference(referenciasUno, referenciasDos);
                            controlador.imprimirEnTabla(modeloCoincidencias, auxImpresion);
                            break;                    
                    }
                    tbCoincidences.setModel(modeloCoincidencias);
                }
                if (rbName.isSelected() && rbDegree.isSelected() && !rbAverage.isSelected()){ //busqueda nombre y profesion
                    if (txtName.getText().compareTo("") == 0 || txtDegree.getText().compareTo("") == 0) {
                        throw new EmptyFieldException("Campos vacíos");
                    }
                    busqueda = txtName.getText();
                    busquedaDos = txtDegree.getText();
                    switch (arbolPreferido) {
                        case 0:
                            referenciasUno = controlador.treeABBCreatedSearch(busqueda, controlador.getArbolABBNombres());
                            referenciasDos = controlador.treeABBCreatedSearch(busquedaDos, controlador.getArbolABBProfesion());
                            auxImpresion = controlador.compareReference(referenciasUno, referenciasDos);
                            controlador.imprimirEnTabla(modeloCoincidencias, auxImpresion);
                            break;
                        case 1:
                            referenciasUno = controlador.treeAVLCreatedSearch(busqueda, controlador.getArbolAVLNombres());
                            referenciasDos = controlador.treeAVLCreatedSearch(busquedaDos, controlador.getArbolAVLProfesion());
                            auxImpresion = controlador.compareReference(referenciasUno, referenciasDos);
                            controlador.imprimirEnTabla(modeloCoincidencias, auxImpresion);
                            break;
                        case 2:
                            referenciasUno = controlador.treeBCreatedSearch(busqueda, controlador.getArbolBNombres());
                            referenciasDos = controlador.treeBCreatedSearch(busquedaDos, controlador.getArbolBProfesion());
                            auxImpresion = controlador.compareReference(referenciasUno, referenciasDos);
                            controlador.imprimirEnTabla(modeloCoincidencias, auxImpresion);
                            break;                    
                    }
                    tbCoincidences.setModel(modeloCoincidencias);
                }
                if(rbName.isSelected() && !rbAverage.isSelected() && !rbDegree.isSelected()){    //busqueda nombre
                    if (txtName.getText().compareTo("") == 0) {
                        throw new EmptyFieldException("Campos vacíos");
                    }
                    busqueda = txtName.getText();
                    switch (arbolPreferido) {
                        case 0:
                            referenciasUno = controlador.treeABBCreatedSearch(busqueda, controlador.getArbolABBNombres());
                            controlador.imprimirEnTabla(modeloCoincidencias, referenciasUno);
                            break;
                        case 1:
                            referenciasUno = controlador.treeAVLCreatedSearch(busqueda, controlador.getArbolAVLNombres());
                            controlador.imprimirEnTabla(modeloCoincidencias, referenciasUno);
                            break;
                        case 2:
                            referenciasUno = controlador.treeBCreatedSearch(busqueda, controlador.getArbolBNombres());
                            controlador.imprimirEnTabla(modeloCoincidencias, referenciasUno);
                            break;
                    }
                    tbCoincidences.setModel(modeloCoincidencias);
                }
                if(rbAverage.isSelected() && !rbDegree.isSelected() && !rbName.isSelected()){    //busqueda promedio
                    if (txtAverage.getText().compareTo("") == 0) {
                        throw new EmptyFieldException("Campos vacíos");
                    }
                    busqueda = Float.parseFloat(txtAverage.getText()) + "";
                    switch (arbolPreferido) {
                        case 0:
                            referenciasUno = controlador.treeABBCreatedSearch(busqueda, controlador.getArbolABBPromedio());
                            controlador.imprimirEnTabla(modeloCoincidencias, referenciasUno);
                            break;
                        case 1:
                            referenciasUno = controlador.treeAVLCreatedSearch(busqueda, controlador.getArbolAVLPromedio());
                            controlador.imprimirEnTabla(modeloCoincidencias, referenciasUno);
                            break;
                        case 2:
                            referenciasUno = controlador.treeBCreatedSearch(busqueda, controlador.getArbolBPromedio());
                            controlador.imprimirEnTabla(modeloCoincidencias, referenciasUno);
                            break;
                    }
                    tbCoincidences.setModel(modeloCoincidencias);
                }
                if (rbDegree.isSelected() && !rbAverage.isSelected() && !rbName.isSelected()) {   //busqueda profesion
                    if (txtDegree.getText().compareTo("") == 0) {
                        throw new EmptyFieldException("Campos vacíos");
                    }
                    busqueda = txtDegree.getText();
                    switch (arbolPreferido) {
                        case 0:
                            referenciasUno = controlador.treeABBCreatedSearch(busqueda, controlador.getArbolABBProfesion());
                            controlador.imprimirEnTabla(modeloCoincidencias, referenciasUno);
                            break;
                        case 1:
                            referenciasUno = controlador.treeAVLCreatedSearch(busqueda, controlador.getArbolAVLProfesion());
                            controlador.imprimirEnTabla(modeloCoincidencias, referenciasUno);
                            break;
                        case 2:
                            referenciasUno = controlador.treeBCreatedSearch(busqueda, controlador.getArbolBProfesion());
                            controlador.imprimirEnTabla(modeloCoincidencias, referenciasUno);
                            break;
                    }
                    tbCoincidences.setModel(modeloCoincidencias);
                }
                if(!rbName.isSelected() && !rbAverage.isSelected() && !rbDegree.isSelected()){
                    JOptionPane.showMessageDialog(null, "Revise si tiene marcado un método de búsqueda así como los datos en la búsqueda");
                }
            } 
            catch (EmptyFieldException ex1){
                JOptionPane.showMessageDialog(this, "campos seleccionados están vacíos", "Error en los campos de búsqueda", JOptionPane.ERROR_MESSAGE);
            }
            catch (Exception ex) {
                JOptionPane.showMessageDialog(null, busqueda + " no fue encontrado dentro del árbol");
            }
        }
        else{
            JOptionPane.showMessageDialog(null, "Primero ingresa los datos", "Datos no registrados", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            private Controller controlador;
            public void run() {
                new FrMenu(this.controlador).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreateTree;
    private javax.swing.JButton btnLoadData;
    private javax.swing.JButton btnSearch;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lbCoincidences;
    private javax.swing.JLabel lbDirection;
    private javax.swing.JLabel lbQuestionSearch;
    private javax.swing.JLabel lbQuestionTree;
    private javax.swing.JLabel lbTitle;
    private javax.swing.JComboBox<String> optionsTree;
    private javax.swing.JRadioButton rbAverage;
    private javax.swing.JRadioButton rbDegree;
    private javax.swing.JRadioButton rbName;
    private javax.swing.JTable tbCoincidences;
    private javax.swing.JTextField txtAverage;
    private javax.swing.JTextField txtDegree;
    private javax.swing.JTextField txtDirection;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
}
